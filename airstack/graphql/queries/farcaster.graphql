query GetFarcasterUsersWithAssociatedAddresses($limit: Int, $cursor: String) {
    Socials(
        input: {filter: {dappName: {_eq: farcaster}}, blockchain: ethereum, limit: $limit, cursor: $cursor}
    ) {
        Social {
            userId
            userAssociatedAddresses
        }
        pageInfo {
            nextCursor
            prevCursor
            hasNextPage
            hasPrevPage
        }
    }
}

query GetFarcasterUsersByChannel($channelId: String, $limit: Int, $cursor: String) {
    FarcasterChannels(
        input: {filter: {channelId: {_eq: $channelId}} blockchain: ALL, limit: $limit, cursor: $cursor}
    ) {
        FarcasterChannel {
            participants {
                participant {
                    userAddress
                    profileName
                    fid: userId
                    userAssociatedAddresses
                    followerCount
                    followingCount
                }
            }
        }
        pageInfo {
            hasNextPage
            hasPrevPage
            nextCursor
            prevCursor
        }
    }
}

query GetFarcasterUserFollowers($userId: String) {
    Socials(
        input: {filter: {dappName: {_eq: farcaster}, userId: {_eq: $userId}}, blockchain: ethereum}
    ) {
        Social {
            followerCount
        }
    }
}


# always prefix userId and followingId with "fc_fid:<userId || followingId>"
query CheckFarcasterFollowing($userId: Identity, $followingId: Identity) {
    SocialFollowings(
        input: {filter: {identity: {_eq: $userId}, dappName: {_eq: farcaster}}, blockchain: ALL, limit:1}
    ) {
        Following {
            followingAddress {
                socials(input: {filter: {identity: {_eq: $followingId}, dappName: {_eq: farcaster}}}) {
                    profileName
                }
            }
        }
    }
}